from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from tgbot.infrastructure.database.db_functions import order_functions, user_functions, product_functions
from tgbot.infrastructure.database.db_functions.feedback_functions import add_feedback
from tgbot.keyboards.inline_kbs import choose_payment_method_kb
from tgbot.keyboards.pagination_kbs import user_orders_kb, orders_pagination_call_cd
from tgbot.keyboards.reply_kbs import main_menu_kb, reply_cancel_kb, location_methods_kb
from tgbot.middlewares.throttling import rate_limit
from tgbot.misc.dependences import MAX_FEEDBACK_LENGTH
from tgbot.misc.states import Order, Feedback, ReplenishBalance
from tgbot.services.text_formatting_functions import create_order_history_text


@rate_limit(1)
async def make_order(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.reset_data()
    user_obj = await user_functions.get_user(session, telegram_id=message.from_user.id)
    if user_obj.balance < await product_functions.get_the_cheapest_product_price(session):
        await message.answer("üòî –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    flag = await user_functions.check_user_addresses(session, cust_telegram_id=message.from_user.id)
    if flag:
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö:",
                             reply_markup=location_methods_kb(has_addresses=flag))
    else:
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=location_methods_kb(has_addresses=flag))
    await Order.GetLocation.set()


@rate_limit(1)
async def replenish_balance(message: types.Message):
    text = ("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:\n\n"
            "‚ÑπÔ∏è <i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≤–∞–ª—é—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä <b>USD</b>), –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è "
            "–ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É –¶–ë –†–£–∑.</i>")
    await message.answer(text=text, reply_markup=choose_payment_method_kb)
    await ReplenishBalance.GetPaymentMethod.set()


@rate_limit(1)
async def user_orders(message: types.Message, session: AsyncSession):
    orders_count = await order_functions.get_user_orders_count(session, cust_telegram_id=message.from_user.id)
    if orders_count == 0:
        await message.answer("ü§î –í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏.")
        return
    order_obj = await order_functions.get_user_order_pagination(session, cust_telegram_id=message.from_user.id,
                                                                counter=1)
    text = await create_order_history_text(order_obj, session)
    await message.answer(text=text, reply_markup=user_orders_kb(orders_count=orders_count))


async def show_chosen_page(call: types.CallbackQuery, callback_data: dict, session: AsyncSession):
    current_page = callback_data.get("page")
    if current_page == "cancel":
        await call.answer()
        await call.message.edit_text("üòã –ù—è–º-–Ω—è–º!")
        return
    elif current_page == "begin_empty":
        await call.answer("–í—ã –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞!", show_alert=False)
        return
    elif current_page == "end_empty":
        await call.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞!", show_alert=False)
        return
    await call.answer()
    orders_count = await order_functions.get_user_orders_count(session, cust_telegram_id=call.from_user.id)
    order_obj = await order_functions.get_user_order_pagination(session, cust_telegram_id=call.from_user.id,
                                                                counter=int(current_page))

    text = await create_order_history_text(order_obj, session)
    keyboard = user_orders_kb(orders_count=orders_count, page=int(current_page))
    await call.message.edit_text(text=text, reply_markup=keyboard)


@rate_limit(1)
async def feedback(message: types.Message, state: FSMContext):
    await message.answer("üì® –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –í—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=reply_cancel_kb)
    await state.reset_data()
    await Feedback.GetFeedbackText.set()


@rate_limit(1)
async def save_feedback(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
    elif len(message.text) > MAX_FEEDBACK_LENGTH:
        await message.answer(f"‚ùóÔ∏è –î–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ {MAX_FEEDBACK_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. "
                             f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    else:
        await add_feedback(session, cust_telegram_id=message.from_user.id, feedback_text=message.text)
        await session.commit()
        await message.reply("‚ù£Ô∏è –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=main_menu_kb)
    await state.reset_data()
    await state.finish()


def register_main_menu(dp: Dispatcher):
    dp.register_message_handler(make_order, text=["üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "/order"], state="*")

    dp.register_message_handler(replenish_balance, text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", state="*")

    dp.register_message_handler(user_orders, text="üõç –ú–æ–∏ –∑–∞–∫–∞–∑—ã", state="*")
    dp.register_callback_query_handler(show_chosen_page, orders_pagination_call_cd.filter(), state="*")

    dp.register_message_handler(feedback, text=["‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "/feedback"], state="*")
    dp.register_message_handler(save_feedback, content_types=types.ContentType.TEXT,
                                state=Feedback.GetFeedbackText)
