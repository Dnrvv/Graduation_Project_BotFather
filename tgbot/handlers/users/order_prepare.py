import asyncio
import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageToDeleteNotFound
from sqlalchemy.ext.asyncio import AsyncSession

from tgbot.config import load_config
from tgbot.handlers.users.order_menu import list_categories
from tgbot.infrastructure.database.db_functions import user_functions
from tgbot.keyboards.reply_kbs import location_methods_kb, main_menu_kb, saved_locations_kb, \
    reply_approve_kb, reply_cancel_kb
from tgbot.middlewares.throttling import rate_limit
from tgbot.misc.dependences import KM_DELIVERY_PRICE
from tgbot.misc.states import Order
from tgbot.services.request_functions import get_address
from tgbot.services.broadcast_functions import broadcast
from tgbot.services.service_functions import calc_delivery_cost


@rate_limit(1)
async def choose_saved_delivery_location(message: types.Message, session: AsyncSession):
    addresses = await user_functions.get_user_addresses(session, cust_telegram_id=message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=saved_locations_kb(addresses=addresses))


@rate_limit(1)
async def get_delivery_location(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.location:
        location = message.location
        please_wait_msg = None

        address_task = asyncio.create_task(get_address(location.latitude, location.longitude))
        done, _ = await asyncio.wait([address_task], timeout=5)
        # done - —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if address_task in done:
            address = address_task.result()
        else:
            please_wait_msg = await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await address_task
            address = address_task.result()

        if not address:
            if please_wait_msg:
                await message.bot.delete_message(chat_id=message.from_user.id, message_id=please_wait_msg.message_id)
            admins = load_config().tg_bot.admin_ids
            await broadcast(message.bot, users=admins, text=f"üõ† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–µ –∞–¥—Ä–µ—Å–∞.")

            await message.answer("üòØ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —ç—Ç–∏–º.",
                                 reply_markup=main_menu_kb)
            await state.reset_data()
            await state.finish()
            return

        elif address == "Incorrect city":
            if please_wait_msg:
                await message.bot.delete_message(chat_id=message.from_user.id, message_id=please_wait_msg.message_id)
            await message.answer("üòî –ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return

        if please_wait_msg:
            await message.bot.delete_message(chat_id=message.from_user.id, message_id=please_wait_msg.message_id)

        await message.answer(f"üìç –ê–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑: <b>{address}</b>.\n"
                             f"–í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ</b> —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?", reply_markup=reply_approve_kb)
        await state.update_data(address=address, latitude=location.latitude, longitude=location.longitude)
        await Order.ApproveLocation.set()
        return

    flag = await user_functions.check_user_addresses(session, cust_telegram_id=message.from_user.id)

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if flag:
            await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö:",
                                 reply_markup=location_methods_kb(has_addresses=flag))
        else:
            await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=location_methods_kb(has_addresses=flag))
        return

    if not flag:
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=location_methods_kb(has_addresses=flag))
        return

    addresses = await user_functions.get_user_addresses(session, cust_telegram_id=message.from_user.id)
    if message.text not in addresses:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:",
                             reply_markup=saved_locations_kb(addresses=addresses))
        return

    address_obj = await user_functions.get_user_address_obj(session, cust_telegram_id=message.from_user.id,
                                                            address=message.text)

    await message.answer(f"üìç –ê–¥—Ä–µ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑: <b>{message.text}</b>.\n"
                         f"–í—ã <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ</b> —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?", reply_markup=reply_approve_kb)
    await state.update_data(address=message.text, latitude=address_obj.latitude, longitude=address_obj.longitude)
    await Order.ApproveLocation.set()


@rate_limit(1)
async def approve_delivery_location(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == "‚úÖ –î–∞":
        async with state.proxy() as data:
            latitude = data.get("latitude")
            longitude = data.get("longitude")
        delivery_cost = calc_delivery_cost(cust_latitude=latitude, cust_longitude=longitude, km_price=KM_DELIVERY_PRICE)

        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∫–∞—Ñ–µ
        top_msg = await message.answer("‚ù£Ô∏è –ó–∞–∫–∞–∂–µ–º –≤–∫—É—Å–Ω—è—à–µ–∫.", reply_markup=reply_cancel_kb)
        await state.update_data(delivery_cost=delivery_cost, top_msg_id=top_msg.message_id, selected_products={})
        await list_categories(message, state, session)
        await Order.Menu.set()

    elif message.text == "‚ùå –ù–µ—Ç":
        flag = await user_functions.check_user_addresses(session, cust_telegram_id=message.from_user.id)
        if flag:
            await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö:",
                                 reply_markup=location_methods_kb(has_addresses=flag))
        else:
            await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=location_methods_kb(has_addresses=flag))
        await Order.GetLocation.set()

    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=reply_approve_kb)
        await Order.ApproveLocation.set()


@rate_limit(1)
async def cancel_order(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        top_msg_id = data.get("top_msg_id")
        menu_msg_id = data.get("menu_msg_id")
        ph_msg_id = data.get("ph_msg_id")

    try:
        if top_msg_id:
            await message.bot.delete_message(chat_id=message.from_user.id, message_id=top_msg_id)
        if ph_msg_id:
            await message.bot.delete_message(chat_id=message.from_user.id, message_id=ph_msg_id)
        if menu_msg_id:
            await message.bot.delete_message(chat_id=message.from_user.id, message_id=menu_msg_id)
    except MessageToDeleteNotFound as error:
        logging.error(error)
        pass

    await state.reset_data()
    await state.reset_state()
    await message.answer("üòî –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb)


def register_order_prepare(dp: Dispatcher):
    dp.register_message_handler(cancel_order, text="‚ùå –û—Ç–º–µ–Ω–∞",
                                state=[Order.GetLocation, Order.ApproveLocation, Order.Menu])
    dp.register_message_handler(choose_saved_delivery_location, text="üó∫ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞", state=Order.GetLocation)
    dp.register_message_handler(get_delivery_location, content_types=[types.ContentType.LOCATION,
                                                                      types.ContentType.TEXT], state=Order.GetLocation)
    dp.register_message_handler(approve_delivery_location, content_types=types.ContentType.TEXT,
                                state=Order.ApproveLocation)
